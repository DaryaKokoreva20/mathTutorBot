import telebot
from dotenv import load_dotenv
import os
import json
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

load_dotenv()
TOKEN = os.getenv("TOKEN")
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD")

bot = telebot.TeleBot(TOKEN)

DATA_FILE = "users.json"

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r") as f:
        data = json.load(f)
else:
    data = {"tutor_ids": [], "students": []}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def save_data():
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=4)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
def tutor_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        KeyboardButton("üìö –û—Ç–ø—Ä–∞–≤–∏—Ç—å –î–ó"),
        KeyboardButton("üóì –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    )
    keyboard.add(
        KeyboardButton("üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–Ω—è—Ç–∏–µ"),
        KeyboardButton("üì¢ –û–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    )
    keyboard.add(
        KeyboardButton("üìä –û—Ç—á–µ—Ç –æ –ø—Ä–æ—à–µ–¥—à–∏—Ö –∑–∞–Ω—è—Ç–∏—è—Ö"),
        KeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞")
    )
    return keyboard


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É—á–µ–Ω–∏–∫–∞
def student_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –î–ó –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"))
    keyboard.add(KeyboardButton("üîÑ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–µ—Ä–µ–Ω–æ—Å –∑–∞–Ω—è—Ç–∏—è"))
    return keyboard


@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id == data["tutor_id"]:
        bot.send_message(
            user_id,
            "–ü—Ä–∏–≤–µ—Ç, —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä! –¢—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.",
            reply_markup=tutor_menu()
        )
    elif user_id in data["students"]:
        bot.send_message(
            user_id,
            "–ü—Ä–∏–≤–µ—Ç, —É—á–µ–Ω–∏–∫! –¢—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.",
            reply_markup=student_menu()
        )
    else:
        bot.send_message(user_id, "–¢—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–µ —É—á–µ–Ω–∏–∫–æ–≤. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∏)
@bot.message_handler(func=lambda message: message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –î–ó")
def send_homework(message):
    bot.send_message(
        message.chat.id, "–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –î–ó –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞."
    )


@bot.message_handler(
        func=lambda message: message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –î–ó –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
def hand_in_homework(message):
    bot.send_message(
        message.chat.id,
        "–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –î–ó –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞."
    )


@bot.message_handler(
        func=lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def change_schedule(message):
    bot.send_message(
        message.chat.id,
        "–§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞."
    )


@bot.message_handler(func=lambda message: message.text == "–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–Ω—è—Ç–∏–µ")
def reschedule_lesson(message):
    bot.send_message(
        message.chat.id,
        "–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–Ω—è—Ç–∏—è –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞."
    )


@bot.message_handler(
        func=lambda message: message.text == "–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–µ—Ä–µ–Ω–æ—Å –∑–∞–Ω—è—Ç–∏—è")
def request_lesson_reschedule(message):
    bot.send_message(
        message.chat.id,
        "–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å –∑–∞–Ω—è—Ç–∏—è –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞."
    )


@bot.message_handler(
        func=lambda message: message.text == "–û—Ç—á–µ—Ç –æ –ø—Ä–æ—à–µ–¥—à–∏—Ö –∑–∞–Ω—è—Ç–∏—è—Ö")
def report_lessons(message):
    bot.send_message(
        message.chat.id,
        "–§—É–Ω–∫—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞."
    )


@bot.message_handler(func=lambda message: message.text == "–û–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
def general_message(message):
    bot.send_message(
        message.chat.id,
        "–§—É–Ω–∫—Ü–∏—è –º–∞—Å—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞."
    )


@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞")
def add_student(message):
    user_id = message.chat.id
    if user_id != data["tutor_id"]:
        bot.send_message(user_id, "–¢–æ–ª—å–∫–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —É—á–µ–Ω–∏–∫–æ–≤.")
        return

    bot.send_message(user_id, "–í–≤–µ–¥–∏ Telegram ID —É—á–µ–Ω–∏–∫–∞:")
    bot.register_next_step_handler(message, save_student)


def save_student(message):
    try:
        student_id = int(message.text)
        if student_id in data["students"]:
            bot.send_message(message.chat.id, "–≠—Ç–æ—Ç —É—á–µ–Ω–∏–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
        else:
            data["students"].append(student_id)
            save_data()
            bot.send_message(message.chat.id, f"–£—á–µ–Ω–∏–∫ {student_id} –¥–æ–±–∞–≤–ª–µ–Ω!")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")


bot.polling()
